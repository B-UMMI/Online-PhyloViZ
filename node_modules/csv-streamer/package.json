{
  "author": {
    "name": "Alex Scheel Meyer",
    "url": "http://www.linkedin.com/in/alexscheelmeyer"
  },
  "name": "csv-streamer",
  "description": "CSV reader with Node Stream API",
  "version": "0.1.1",
  "homepage": "https://github.com/alexscheelmeyer/csv-stream",
  "repository": {
    "type": "git",
    "url": "git://github.com/alexscheelmeyer/csv-stream.git"
  },
  "main": "csv-stream.js",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": ">= 0.8"
  },
  "readme": "CSV-streamer\n---------------\n\nThis is code for reading CSV files. It is very simple and only tries to fill one single need : if someone hands you a CSV file and you\nwant to read it into your code for further processing.\n\nIt has no dependencies, except for [Mocha](http://visionmedia.github.io/mocha/) if you want to run the tests.\n\nThe API is designed as a readable and writeable stream, making it possible to use it as part of a \"pipe\"-chain. Other benefits are great performance\nand simple but flexible interface.\n\nInstalling\n----------\n\n    npm install csv-streamer\n\n\nUsage\n-----\nUsually you just want to load that CSV-file :\n\n```javascript\nvar fs=require('fs');\nvar CSVStream=require('csv-streamer');\nvar csv=new CSVStream({headers:true});\n\ncsv.on('data',function(line){\n\t//do something with the data\n});\nfs.createReadStream('file.csv').pipe(csv);\n\n```\n\nCSV files can be with or without a leading line with names of columns (headers). The default is no headers and in that case each data-callback\nwill provide you with an array of the values of each line. If headers are available it will instead contain an object with the values as named\nproperties.\n\nIf you need to know the names of the headers, you can listen for the \"headers\" event, it will provide you with an array of the names.\n\nShould you have the need for parsing tab separated files or something even more wicked, you can pass a custom delimiter as part of the options\nobject :\n\n```javascript\nvar csv=new CSVStream({headers:true,delimiter:'\\t'});\n```\n\nIf you are so unlucky that you have CSV in a string only, you should look into wrapping the string in a stream API and then pipe that into the\nCSV stream. Something like [this](http://technosophos.com/content/using-string-stream-reader-nodejs) (not tested).\n\nYou can also have a look at the test folder to see some examples of using the API.\n\nIn my testing it seems to be around 33% faster compared to [node-csv](https://github.com/voodootikigod/node-csv) code by [Chris Williams](https://github.com/voodootikigod).\n\nOther\n-----\nMade by Alex Scheel Meyer. Released to the public domain.\n\nUses CSVToArray function by [Ben Nadel](http://www.bennadel.com/blog/1504-Ask-Ben-Parsing-CSV-Strings-With-Javascript-Exec-Regular-Expression-Command.htm)\n\nInspired by the [node-csv](https://github.com/voodootikigod/node-csv) code by [Chris Williams](https://github.com/voodootikigod)\n\nAlso see [csv-stream](https://github.com/lbdremy/node-csv-stream)\n ",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexscheelmeyer/csv-stream/issues"
  },
  "_id": "csv-streamer@0.1.1",
  "dist": {
    "shasum": "94e4ef37501e5f47c03d47c586be2da43fe68077",
    "tarball": "http://registry.npmjs.org/csv-streamer/-/csv-streamer-0.1.1.tgz"
  },
  "_from": "csv-streamer@",
  "_npmVersion": "1.2.21",
  "_npmUser": {
    "name": "alexscheelmeyer",
    "email": "alexscheelmeyer@gmail.com"
  },
  "maintainers": [
    {
      "name": "alexscheelmeyer",
      "email": "alexscheelmeyer@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "94e4ef37501e5f47c03d47c586be2da43fe68077",
  "_resolved": "https://registry.npmjs.org/csv-streamer/-/csv-streamer-0.1.1.tgz"
}
