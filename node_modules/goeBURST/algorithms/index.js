
function hamming(p, q) {
  var res = 0;
  for (var i = 0; i < p.length; i++){
    if (p[i] != q[i]) res = res + 1;
  }
  return [res, null];
}

function hammingPairwise(p, q) {
  var res = 0;
  for (var i = 0; i < p.length; i++){
    if (p[i] != q[i] && p[i].indexOf('-') < 0 && q[i].indexOf('-') < 0) res = res + 1;
  }
  return [res, null];
}

function hammingPairwiseAndMissing(p, q) {
  var res = 0;
  var missings = 0;
  for (var i = 0; i < p.length; i++){

    if (p[i] != q[i] && p[i] == '-' && q[i] == '-') res = res + 1;
    if (p[i] == '-' || q[i] == '-'){
      //res = res + 1;
      missings = missings + 1;
    }

  }
  return [res, missings];
}

function goeBURST_algorithm(profileArray, identifiers, type, comparator, callback){
	
	if (type == 'krustal'){
		var algorithm = require('./krustal');
	}
	else{
		var algorithm = require('./prim');
	}

	var distToUse = hamming;
	
	if(comparator == 'PCM') distToUse = hammingPairwise;
	else if (comparator == 'PCMT') distToUse = hammingPairwiseAndMissing;
	else distToUse = hamming;

	algorithm(profileArray, identifiers, distToUse, function(links, distanceMatrix){
        callback(links, distanceMatrix);
    });
}

module.exports = goeBURST_algorithm;