
function createInput(dataToGraph, callback){

	var dataset = dataToGraph[0];
	var linksToUse = dataset.links;

	var graph = {};
	var nodes = {};
	var links = [];
	var existsProfile = {};

	checkNodes(dataset, function(){
		checkIsolates(dataset, function(){
			checkLinks(linksToUse, function(){
				
				graph.nodes = Object.keys(nodes).map(function(k) { return nodes[k] }); // nodeObject to array
				graph.links = links;
				graph.schemeGenes = dataset.schemeGenes;
				graph.metadata = dataset.metadata;
				
				callback(graph);
			});
		});
	});

	function checkNodes(dataset, callback){

		dataset.profiles.forEach(function(profile){
			var arr = Object.keys(profile).map(function(k) { return profile[k] });
			var key = arr.pop();
			arr = arr.reverse();

			var node = {key: key, profile: arr, isolates: []};
			
			if(existsProfile[String(arr)]) console.log('Profile already exists');
			
			else{
				existsProfile[String(arr)] = true;
				nodes[key] = node;
			}
		});

		callback();
	}

	function checkIsolates(dataset, callback){

		dataset.isolates.forEach(function(isolate){

			if(nodes[isolate[dataset.key]]){
				var arr = Object.keys(isolate).map(function(k) { return isolate[k]; });
			}

			nodes[isolate[dataset.key]].isolates.push(arr.reverse());
			
		});

		callback();
	}

	function checkLinks(linksToUse, callback){

		linksToUse.forEach(function(link){
			links.push({source: link.source, target: link.target, value: link.value});
		});

		callback();
	}

}


module.exports = function(dataToGraph, callback){

	createInput(dataToGraph, function(graph){
		callback(graph);
	});
}
