
function newickParser(dataset, callback){

	var newickParser = require('newick_parser');

	JSONnewick = newickParser.parser.parse(dataset.newick);

	countTransitionNodes = 0;

	var nodes = {};
	var links = [];
	var graph = {};
	var sameProfileHas = {};


	checkChildren(JSONnewick, function(){

			checkIsolates(dataset, function(){

				graph.nodes = Object.keys(nodes).map(function(k) { return nodes[k] }); // nodeObject to array
				graph.links = links;
				graph.schemeGenes = dataset.schemeGenes;
				graph.metadata = dataset.metadata;

				if(dataset.positions) graph.positions = JSON.parse(dataset.positions);
				else graph.positions = {};

				callback(graph);

			})		
	});



	function checkChildren(JSONnewick, callback){

		JSONnewick.visit(function(node) {
			var nodeName = '';
			
			if (node.data == '') nodeName = 'TransitionNode' + String(node.id);
			else nodeName = node.data;
				
			nodes[nodeName] = {key : nodeName, isolates: [], profile: []};

			for(i in node.children){
				targetName = '';
				if (node.children[i].data == '') targetName = 'TransitionNode' + String(node.children[i].id);
				else targetName = node.children[i].data;

				links.push({source: nodeName, target: targetName, value: node.children[i].branchlength});	
			}

		});

		callback();
	}


	function checkIsolates(dataset, callback){

		dataset.isolates.forEach(function(isolate){

			if (sameProfileHas.hasOwnProperty(isolate[dataset.key])){
				isolate[dataset.key] = sameProfileHas[isolate[dataset.key]];
			}

			if(nodes[isolate[dataset.key]]){
				var arr = Object.keys(isolate).map(function(k) { return isolate[k]; });
			}

			try{
				nodes[isolate[dataset.key]].isolates.push(arr.reverse());
			}
			catch (err){
				var x = true;
			}
			
		});

		callback();
	}
}


module.exports = function(JSONnewick, callback){

	newickParser(JSONnewick, function(graph){
		callback(graph);
	});
}